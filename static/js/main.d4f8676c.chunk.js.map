{"version":3,"sources":["services/api.js","components/Chart/Semigauge/index.js","components/Chart/index.js","components/Chart/Gradient/index.js","components/Chart/Zoomable/index.js","pages/index.js","registerServiceWorker.js","index.js"],"names":["api","axios","create","baseURL","Semigauge","Component","props","state","series","options","chart","type","offsetY","plotOptions","radialBar","startAngle","endAngle","track","background","strokeWidth","margin","dropShadow","enabled","top","left","color","opacity","blur","dataLabels","name","show","value","fontSize","fill","gradient","shade","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","labels","className","this","width","Gradient","height","toolbar","hollow","size","image","undefined","imageOffsetX","imageOffsetY","position","formatter","val","parseInt","gradientToColors","stroke","lineCap","id","Zoomable","data","zoom","curve","title","text","align","grid","row","colors","xaxis","categories","Browse","useState","username","password","landingPage","setLandingPage","items","setItems","useEffect","post","headers","then","response","token","access","console","log","get","Authorization","results","map","item","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d4f8676c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://ietsis.dynu.net:9000/\",\n  //baseURL: \"https://cors-anywhere.herokuapp.com//ietsis.dynu.net:9000/\",\n});\n\nexport default api;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nclass Semigauge extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      series: [20],\n      options: {\n        chart: {\n          type: \"radialBar\",\n          offsetY: -20,\n        },\n        plotOptions: {\n          radialBar: {\n            startAngle: -90,\n            endAngle: 90,\n            track: {\n              background: \"#e7e7e7\",\n              strokeWidth: \"97%\",\n              margin: 5, // margin is in pixels\n              dropShadow: {\n                enabled: true,\n                top: 2,\n                left: 0,\n                color: \"#999\",\n                opacity: 1,\n                blur: 2,\n              },\n            },\n            dataLabels: {\n              name: {\n                show: false,\n              },\n              value: {\n                offsetY: -2,\n                fontSize: \"22px\",\n              },\n            },\n          },\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            shade: \"light\",\n            shadeIntensity: 0.4,\n            inverseColors: false,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 50, 53, 91],\n          },\n        },\n        labels: [\"Average Results\"],\n      },\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"row\">\n          <div className=\"col mixed-chart\">\n            <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n          <div className=\"col mixed-chart\">\n            <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n          <div className=\"col mixed-chart\">\n            <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n          <div className=\"col mixed-chart\">\n            <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n          <div className=\"col mixed-chart\">\n            <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Semigauge;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateCharts = this.updateCharts.bind(this);\n\n    this.state = {\n      optionsMixedChart: {\n        chart: {\n          id: \"basic-bar\",\n          toolbar: {\n            show: false,\n          },\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: \"50%\",\n            endingShape: \"arrow\",\n          },\n        },\n        stroke: {\n          width: [4, 0, 0],\n        },\n        xaxis: {\n          categories: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n        },\n        markers: {\n          size: 6,\n          strokeWidth: 3,\n          fillOpacity: 0,\n          strokeOpacity: 0,\n          hover: {\n            size: 8,\n          },\n        },\n        yaxis: {\n          tickAmount: 5,\n          min: 0,\n          max: 100,\n        },\n      },\n      seriesMixedChart: [\n        {\n          name: \"series-1\",\n          type: \"line\",\n          data: [30, 40, 25, 50, 49, 21, 70, 51],\n        },\n        {\n          name: \"series-2\",\n          type: \"column\",\n          data: [23, 12, 54, 61, 32, 56, 81, 19],\n        },\n        {\n          name: \"series-3\",\n          type: \"column\",\n          data: [62, 12, 45, 55, 76, 41, 23, 43],\n        },\n      ],\n      optionsRadial: {\n        plotOptions: {\n          radialBar: {\n            startAngle: -135,\n            endAngle: 225,\n            hollow: {\n              margin: 0,\n              size: \"70%\",\n              background: \"#fff\",\n              image: undefined,\n              imageOffsetX: 0,\n              imageOffsetY: 0,\n              position: \"front\",\n              dropShadow: {\n                enabled: true,\n                top: 3,\n                left: 0,\n                blur: 4,\n                opacity: 0.24,\n              },\n            },\n            track: {\n              background: \"#fff\",\n              strokeWidth: \"67%\",\n              margin: 0, // margin is in pixels\n              dropShadow: {\n                enabled: true,\n                top: -3,\n                left: 0,\n                blur: 4,\n                opacity: 0.35,\n              },\n            },\n\n            dataLabels: {\n              showOn: \"always\",\n              name: {\n                offsetY: -20,\n                show: true,\n                color: \"#888\",\n                fontSize: \"13px\",\n              },\n              value: {\n                formatter: function(val) {\n                  return val;\n                },\n                color: \"#111\",\n                fontSize: \"30px\",\n                show: true,\n              },\n            },\n          },\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            shade: \"dark\",\n            type: \"horizontal\",\n            shadeIntensity: 0.5,\n            gradientToColors: [\"#ABE5A1\"],\n            inverseColors: true,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 100],\n          },\n        },\n        stroke: {\n          lineCap: \"round\",\n        },\n        labels: [\"Percent\"],\n      },\n      seriesRadial: [0],\n      optionsBar: {\n        chart: {\n          stacked: true,\n          stackType: \"100%\",\n          toolbar: {\n            show: false,\n          },\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n          },\n        },\n        dataLabels: {\n          dropShadow: {\n            enabled: true,\n          },\n        },\n        stroke: {\n          width: 0,\n        },\n        xaxis: {\n          categories: [\"Fav Color\"],\n          labels: {\n            show: false,\n          },\n          axisBorder: {\n            show: false,\n          },\n          axisTicks: {\n            show: false,\n          },\n        },\n        fill: {\n          opacity: 1,\n          type: \"gradient\",\n          gradient: {\n            shade: \"dark\",\n            type: \"vertical\",\n            shadeIntensity: 0.35,\n            gradientToColors: undefined,\n            inverseColors: false,\n            opacityFrom: 0.85,\n            opacityTo: 0.85,\n            stops: [90, 0, 100],\n          },\n        },\n\n        legend: {\n          position: \"bottom\",\n          horizontalAlign: \"right\",\n        },\n      },\n      seriesBar: [\n        {\n          name: \"blue\",\n          data: [32],\n        },\n        {\n          name: \"green\",\n          data: [41],\n        },\n        {\n          name: \"yellow\",\n          data: [12],\n        },\n        {\n          name: \"red\",\n          data: [65],\n        },\n      ],\n    };\n  }\n\n  updateCharts() {\n    const max = 90;\n    const min = 30;\n    const newMixedSeries = [];\n    const newBarSeries = [];\n\n    this.state.seriesMixedChart.forEach(s => {\n      const data = s.data.map(() => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n      });\n      newMixedSeries.push({ data: data, type: s.type });\n    });\n\n    this.state.seriesBar.forEach(s => {\n      const data = s.data.map(() => {\n        return Math.floor(Math.random() * (180 - min + 1)) + min;\n      });\n      newBarSeries.push({ data, name: s.name });\n    });\n\n    this.setState({\n      seriesMixedChart: newMixedSeries,\n      seriesBar: newBarSeries,\n      seriesRadial: [Math.floor(Math.random() * (90 - 50 + 1)) + 50],\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"row\">\n          <div className=\"col mixed-chart\">\n            <Chart\n              options={this.state.optionsMixedChart}\n              series={this.state.seriesMixedChart}\n              type=\"line\"\n              width=\"500\"\n            />\n          </div>\n\n          <div className=\"col radial-chart\">\n            <Chart\n              options={this.state.optionsRadial}\n              series={this.state.seriesRadial}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n\n          <div className=\"col radial-chart\">\n            <Chart\n              options={this.state.optionsRadial}\n              series={this.state.seriesRadial}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n\n          <div className=\"col radial-chart\">\n            <Chart\n              options={this.state.optionsRadial}\n              series={this.state.seriesRadial}\n              type=\"radialBar\"\n              width=\"280\"\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col percentage-chart\">\n            <Chart\n              options={this.state.optionsBar}\n              height={140}\n              series={this.state.seriesBar}\n              type=\"bar\"\n              width={500}\n            />\n          </div>\n\n          <p className=\"col\">\n            <button onClick={this.updateCharts}>Update!</button>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nclass Gradient extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      series: [75],\n      options: {\n        chart: {\n          height: 350,\n          type: \"radialBar\",\n          toolbar: {\n            show: true,\n          },\n        },\n        plotOptions: {\n          radialBar: {\n            startAngle: -135,\n            endAngle: 225,\n            hollow: {\n              margin: 0,\n              size: \"70%\",\n              background: \"#fff\",\n              image: undefined,\n              imageOffsetX: 0,\n              imageOffsetY: 0,\n              position: \"front\",\n              dropShadow: {\n                enabled: true,\n                top: 3,\n                left: 0,\n                blur: 4,\n                opacity: 0.24,\n              },\n            },\n            track: {\n              background: \"#fff\",\n              strokeWidth: \"67%\",\n              margin: 0, // margin is in pixels\n              dropShadow: {\n                enabled: true,\n                top: -3,\n                left: 0,\n                blur: 4,\n                opacity: 0.35,\n              },\n            },\n\n            dataLabels: {\n              show: true,\n              name: {\n                offsetY: -10,\n                show: true,\n                color: \"#888\",\n                fontSize: \"17px\",\n              },\n              value: {\n                formatter: function(val) {\n                  return parseInt(val);\n                },\n                color: \"#111\",\n                fontSize: \"36px\",\n                show: true,\n              },\n            },\n          },\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            shade: \"dark\",\n            type: \"horizontal\",\n            shadeIntensity: 0.5,\n            gradientToColors: [\"#ABE5A1\"],\n            inverseColors: true,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 100],\n          },\n        },\n        stroke: {\n          lineCap: \"round\",\n        },\n        labels: [\"Cº 0 - 100\"],\n      },\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"card\">\n        <div id=\"chart\">\n          <Chart\n            options={this.state.options}\n            series={this.state.series}\n            type=\"radialBar\"\n            height={350}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Gradient;\n","import React, { Component } from \"react\";\nimport Chart from \"react-apexcharts\";\n\nclass Zoomable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      series: [\n        {\n          name: \"Desktops\",\n          data: [10, 41, 35, 51, 49, 62, 69, 91, 148],\n        },\n      ],\n      options: {\n        chart: {\n          height: 350,\n          type: \"line\",\n          zoom: {\n            enabled: false,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        stroke: {\n          curve: \"straight\",\n        },\n        title: {\n          text: \"Product Trends by Month\",\n          align: \"left\",\n        },\n        grid: {\n          row: {\n            colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\n            opacity: 0.5,\n          },\n        },\n        xaxis: {\n          categories: [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n          ],\n        },\n      },\n    };\n  }\n\n  render() {\n    return (\n      <div id=\"chart\">\n        <div className=\"col mixed-chart\">\n          <Chart\n            options={this.state.options}\n            series={this.state.series}\n            type=\"line\"\n            height={350}\n            width=\"500\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Zoomable;\n","// eslint-disable-next-line no-unused-vars\nimport React, { useState, useEffect } from \"react\";\nimport ApexCharts from \"apexcharts\";\n\n// eslint-disable-next-line no-unused-vars\n//import { Container } from \"./styles\";\n// eslint-disable-next-line no-unused-vars\nimport api from \"../services/api\";\nimport Chart from \"../../src/components/Chart/index.js\";\nimport Semigauge from \"../components/Chart/Semigauge/index\";\nimport Gradient from \"../components/Chart/Gradient\";\nimport Zoomable from \"../components/Chart/Zoomable\";\n\nconst Browse = () => {\n  const [username] = useState(\"admin\");\n  const [password] = useState(\"admin\");\n  const [landingPage, setLandingPage] = useState(false);\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    api\n      .post(\"api/token/\", {\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n        username,\n        password,\n      })\n      .then(function(response) {\n        //setToken(response.data.access);\n        const token = response.data.access;\n\n        console.log(token);\n        api\n          .get(\"lysimeters/\", {\n            headers: {\n              Authorization: `Bearer ${token}`,\n            },\n          })\n          .then(response => {\n            console.log(\"RESPONSE: \", [response.data.results]);\n            [response.data].map(item => {\n              console.log(\"RESPONSE: \", item);\n              return setItems(...items, item.results);\n            });\n          })\n          .catch(error => {\n            console.log(error);\n          });\n\n        setLandingPage(true);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return landingPage ? (\n    <>\n      <Semigauge />\n      <Gradient />\n      <Zoomable />\n    </>\n  ) : (\n    <>XXXXX</>\n  );\n};\n\nexport default Browse;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./pages/index\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}